name: Notify Slack with PR List

on:
  # Trigger when a PR is created, edited, or synchronized
  pull_request:
    types: [opened, synchronize, edited, labeled, unlabeled]
  schedule:
    - cron: '0 9 * * 1-5'  # Run at 9 AM UTC on weekdays

jobs:
  notify_slack:
    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack about PRs
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const tag = 'contact-center';
            const folderPath = '.github';

            function formatDate(dateString) {
              const date = new Date(dateString);
              date.setHours(date.getHours() + 2); // Convert to GMT+2
              return date.toLocaleString('en-GB', { 
                timeZone: 'Etc/GMT-2',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
              });
            }

            // Fetch all open pull requests
            const { data: pullRequests } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open'
            });

            const filteredPRs = await Promise.all(pullRequests.map(async pr => {
              const hasLabel = pr.labels.some(label => label.name === tag);
              
              const { data: files } = await github.rest.pulls.listFiles({
                owner,
                repo,
                pull_number: pr.number
              });
              const hasChangesInFolder = files.some(file => file.filename.includes(folderPath));
              
              if (hasLabel || hasChangesInFolder) {
                const { data: comments } = await github.rest.issues.listComments({
                  owner,
                  repo,
                  issue_number: pr.number
                });
                const commenters = [...new Set(comments.map(comment => comment.user.login))];
                return { ...pr, comments: comments.length, commenters };
              }
              return null;
            }));

            const relevantPRs = filteredPRs.filter(pr => pr !== null);

            let message;
            if (relevantPRs.length === 0) {
              message = `*Open Pull Requests (${tag} or ${folderPath}):*\nThere are currently no open pull requests with the '${tag}' label or changes in '${folderPath}'.`;
            } else {
              const prList = relevantPRs.map(pr => {
                const createdAt = formatDate(pr.created_at);
                const commentInfo = pr.comments > 0 ? 
                  `Comments: ${pr.comments} (by ${pr.commenters.join(', ')})` : 
                  'No comments';
                return `- <${pr.html_url}|PR #${pr.number}: ${pr.title}> by ${pr.user.login} - Created: ${createdAt}, ${commentInfo}`;
              }).join('\n');
              message = `*Open Pull Requests (${tag} or ${folderPath}):*\n${prList}`;
            }

            // Send the message to Slack via the webhook
            const slackWebhookUrl = process.env.SLACK_WEBHOOK_URL;

            try {
              const response = await fetch(slackWebhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ text: message })
              });

              if (!response.ok) {
                throw new Error(`Slack Webhook request failed with status ${response.status}`);
              }

              console.log('PR status sent to Slack.');
            } catch (error) {
              console.error('Failed to send PR status to Slack:', error.message);
            }

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}